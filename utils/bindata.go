// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../lib/kubecfg.libsonnet
package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libKubecfgLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x61\x6f\xdb\x36\x10\xfd\xee\x5f\xf1\x10\x0c\xa8\x5d\xa8\x72\x5b\x0c\x18\xe0\xa2\xc0\xbc\xb4\xc5\xdc\xa5\x0e\x66\x27\x2b\xf2\xcd\x67\xea\x24\xb1\xa5\x48\x8d\xa4\xe2\x78\xc3\xfe\xfb\x40\x4a\x8a\x65\x3b\x01\x0a\x04\x42\xc2\x3b\x3e\xbe\xf7\x78\x77\xcc\x74\x8a\x4b\x53\xef\xad\x2c\x4a\x8f\xb7\xaf\xdf\xfc\x82\x9b\x92\xf1\xbd\xd9\xb2\xc8\x0b\x50\xe3\x4b\x63\xdd\x68\x3a\x6d\x7f\x00\xe0\x4a\x0a\xd6\x8e\x33\x34\x3a\x63\x0b\x5f\x32\xe6\x35\x89\x92\xfb\x48\x82\xbf\xd8\x3a\x69\x34\xde\xa6\xaf\x31\x0e\x09\x17\x5d\xe8\x62\xf2\xae\x43\xd9\x9b\x06\x15\xed\xa1\x8d\x47\xe3\x18\xbe\x94\x0e\xb9\x54\x0c\x7e\x10\x5c\x7b\x48\x0d\x61\xaa\x5a\x49\xd2\x82\xb1\x93\xbe\x8c\x47\x75\x40\x69\x07\x73\xd7\xc1\x98\xad\x27\xa9\x41\x10\xa6\xde\xc3\xe4\xc3\x5c\x90\x3f\xb0\x07\x4a\xef\xeb\xd9\x74\xba\xdb\xed\x52\x8a\xbc\x53\x63\x8b\xa9\x6a\x73\xdd\xf4\x6a\x71\xf9\x71\xb9\xfe\xf8\xea\x6d\xfa\xfa\xb0\xeb\x56\x2b\x76\x0e\x96\xff\x6e\xa4\xe5\x0c\xdb\x3d\xa8\xae\x95\x14\xb4\x55\x0c\x45\x3b\x18\x0b\x2a\x2c\x73\x06\x6f\x02\xf7\x9d\x95\x5e\xea\x22\x81\x33\xb9\xdf\x91\xe5\x0e\x29\x93\xce\x5b\xb9\x6d\xfc\x91\x81\x3d\x53\xe9\x8e\x12\x8c\x06\x69\x5c\xcc\xd7\x58\xac\x2f\xf0\xdb\x7c\xbd\x58\x27\x1d\xce\xd7\xc5\xcd\xef\xd7\xb7\x37\xf8\x3a\x5f\xad\xe6\xcb\x9b\xc5\xc7\x35\xae\x57\xb8\xbc\x5e\x7e\x58\xdc\x2c\xae\x97\x6b\x5c\x7f\xc2\x7c\x79\x87\x3f\x16\xcb\x0f\x09\x58\xfa\x92\x2d\xf8\xa1\xb6\x41\x87\xb1\x90\xc1\x5a\xce\x7a\x1f\xd7\xcc\x47\x44\x72\xd3\x12\x73\x35\x0b\x99\x4b\x01\x45\xba\x68\xa8\x60\x14\xe6\x9e\xad\x96\xba\x40\xcd\xb6\x92\x2e\x5c\xb4\x03\xe9\xac\x43\x52\xb2\x92\x9e\x7c\x5c\x3d\x13\x98\x8e\x46\xff\x8e\x80\xe9\x14\x35\x59\xc7\x9f\x9d\xd1\xe3\x8c\x3c\x4d\x66\xed\x82\x8b\xc9\x9b\xb0\xb4\x41\xf0\x41\x17\x20\x07\xc2\x37\x67\x34\x32\x23\x9a\x8a\xb5\x4f\xe2\x71\x11\xc6\xb2\x6f\xac\x6e\xb7\x59\x76\x8d\x0a\xa6\xc7\x6c\xcd\x1e\x66\xfb\x8d\x85\x4f\x47\x38\x1c\x37\x9b\xc1\xf9\x2c\xd5\xe4\xe5\x3d\x8f\x5f\x3c\xae\xbf\x98\x24\xa3\x01\xb3\x3b\xaa\xd4\x11\xb3\xe7\x88\xdd\xcd\xbf\x5c\x85\x05\xa6\xea\x09\x5a\xa4\xf1\x92\xac\xa5\xfd\xcb\xbe\x26\x9f\x23\xe9\x52\x60\x0e\x27\x75\xa1\xb8\xc5\x88\xc8\xbd\x64\xec\xa4\x52\x70\x3e\x7c\xb7\xdc\xe1\x73\x16\x39\x68\xc4\x23\xda\x1e\x31\xba\xdb\xce\x8a\xc3\xc6\x47\xf1\x41\xd1\x53\xe2\xc3\xfa\x41\x7c\x45\x5a\xe6\xec\x7c\xbc\x99\x7b\x52\x0d\x27\x90\x3a\x63\xed\x27\x33\x08\xa3\xef\xd9\xfa\xa8\xe3\x98\x3d\x36\x31\x77\xd3\x82\x78\x03\xea\x4d\x62\x2d\x4c\xd6\x12\xbd\xa8\x2d\x7b\xbf\xbf\xc0\xb8\x0a\x16\xbc\x52\x52\xf3\x04\x9f\xd7\xd7\xcb\xa4\xe5\xce\x24\xca\x16\x41\xb3\x8b\x1e\x29\xbe\x67\xd5\x11\x68\xdb\x6e\xd3\xfe\xb1\x81\xab\x49\xb0\x0b\xf2\x9e\xe7\xfc\xfe\xe7\xc9\x6c\x86\xf1\x28\xd6\xa5\x11\xa4\x90\xe3\xfd\x91\x05\xc3\xbd\x2f\x26\xef\x62\x66\x7e\x22\x7c\x04\x9c\xf9\x13\xeb\x23\xa6\xfd\x90\x2f\xd1\x92\x16\xe1\xdc\x17\xea\xae\xfd\xf8\xc6\x87\xca\x9e\xb8\xbb\x61\xe8\x70\x7d\xec\x04\xd5\xbc\x8e\x47\xac\xb8\xe0\x87\xb1\x9b\xcc\xf0\x67\x63\x3c\x77\xd5\x57\xf0\x03\x2a\xf6\x24\x4a\xb2\x24\x3c\x5b\x87\xdc\x34\x3a\x0b\x33\x2b\xba\x39\x9d\xc6\x17\xa0\xad\xd3\x30\x90\xa8\xdb\xe5\x4b\xea\xca\xb0\x22\x2f\xda\x69\x6c\xac\x2c\xa4\x26\x05\x25\x3d\x5b\x52\xed\xfe\x03\x76\x00\x3c\xe3\x74\xa2\xe4\x2c\x7e\x90\x63\xd9\x19\x75\xcf\x8b\x8a\x0a\x1e\xcb\xf0\x3d\x71\x3b\x33\xe2\x3b\x87\x61\x16\x26\x53\xe7\x6c\x6e\x4d\xd5\x6e\x8f\xcb\x33\x4f\x05\xa4\x8e\x35\x59\x19\x3b\x18\x69\x31\xfc\x6b\x26\x0b\x76\x3e\x41\xc6\x35\xeb\x2c\x00\x18\xdd\xbf\x7f\x9d\x1c\x53\x55\xa4\x33\x84\x7a\x45\xae\xa8\x88\xb2\x86\xdc\x4e\x14\x0d\x43\x43\x31\x05\x3f\x7c\x09\xd6\x8d\xe3\xaf\x49\x47\x78\x32\xc3\xaa\x9f\x62\xb6\x61\xc8\xbc\x33\x5c\x1e\xae\x66\x58\x3a\x29\x56\x7d\x98\x5c\x9c\xe3\xb1\xd1\x39\x5e\x61\x61\xc2\xa0\x6e\x01\x6a\xd4\x24\xbe\x53\xd1\x0d\x84\x71\xbd\xf7\xa5\xd1\xaf\xa4\x2b\x27\xad\x80\x9e\xcf\x19\xfd\x3e\x70\x42\x7e\xdd\x6c\x9d\x7f\x24\x6f\x45\x02\xcb\xb5\x7a\xe4\x3f\x98\x6f\x61\xda\x85\x18\x09\xa9\x8b\x01\x42\xac\x32\x2b\xda\x76\x0f\x09\x29\xb0\x8a\x79\x51\x43\x7f\x85\xe1\x45\x97\x5a\xa8\x26\x63\xfc\xf4\x26\x01\x7b\xf1\x38\x59\x2c\xe7\xe1\x4d\x31\x70\xcd\x36\x16\x22\xbb\x08\xf2\x63\x96\xf4\x23\x3e\xfa\xf2\xb4\x25\x51\xe5\x53\x96\xc4\xc0\xc1\x92\x92\x55\x75\xc3\x55\xad\xc8\xf3\xd8\xb2\x62\x72\xbc\xa4\x8a\x13\x68\xaa\x38\x8e\xa7\x24\xb6\x82\xbf\x5d\x5d\x25\x88\x83\x20\x74\xe3\x27\x0e\xdd\xf3\xf8\x54\xf0\x43\x1d\x8a\x2b\xa0\xb5\xd9\x20\x8f\x4d\xbf\x6f\xd3\x96\xee\xf9\x5b\x71\x19\x53\x6f\x57\x57\xbd\xbb\x79\x68\x65\x6f\x3a\x8c\xd4\x17\xff\xc4\x7f\xa7\x52\x74\x33\xc8\x6d\xda\x66\x3e\x19\x50\xa1\xab\xfb\x32\xd7\xb9\xb1\x95\xeb\xc6\xb7\x28\xb9\x22\x64\x9c\x4b\xdd\x4e\xde\x70\xbb\x11\x3c\x38\x35\x14\x7f\xe2\xd5\x30\x14\xdc\xfa\x6f\xf4\x7f\x00\x00\x00\xff\xff\xd1\x3a\x57\x5d\x64\x0a\x00\x00")

func libKubecfgLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_libKubecfgLibsonnet,
		"lib/kubecfg.libsonnet",
	)
}

func libKubecfgLibsonnet() (*asset, error) {
	bytes, err := libKubecfgLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/kubecfg.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/kubecfg.libsonnet": libKubecfgLibsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"kubecfg.libsonnet": &bintree{libKubecfgLibsonnet, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

